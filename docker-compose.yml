version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - etl-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - etl-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - etl-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - jmx-exporter
    restart: unless-stopped
    networks:
      - etl-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - etl-network

  # JMX Exporter for Kafka metrics
  jmx-exporter:
    image: sscaling/jmx-prometheus-exporter:latest
    container_name: jmx-exporter
    ports:
      - "5556:5556"
    volumes:
      - ./config/jmx-exporter.yml:/opt/jmx_prometheus_httpserver.yml
    #command: ["5556", "/opt/jmx_prometheus_httpserver.yml"]
    depends_on:
      - kafka
    restart: unless-stopped
    networks:
      - etl-network

  # MinIO Object Storage
  minio:
    networks:
      - etl-network
    image: minio/minio
    container_name: minio
    command: server /var/lib/minio/data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web UI
    volumes:
      - minio-data:/var/lib/minio/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # IoT Event Producer
  iot-producer:
    build:
      context: .
      dockerfile: docker/producer/Dockerfile
    container_name: iot-producer
    env_file:
      - .env
    depends_on:
      - kafka
    restart: unless-stopped
    networks:
      - etl-network

  # Spark Streaming ETL
  spark-streaming:
    networks:
      - etl-network
    build:
      context: .
      dockerfile: docker/streaming/Dockerfile
    container_name: spark-streaming
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_started
      minio:
        condition: service_healthy
    volumes:
      - ./tmp/spark-checkpoints:/tmp/spark-checkpoints
    restart: unless-stopped

  python-etl-stream:
    networks:
    - etl-network
    build: ./src/kafka_consumer_etl
    env_file:
    - .env
    depends_on:
    - kafka
    - iot-producer
    - minio
    environment:
    - AGGREGATOR_BATCH_SIZE=100
    - AGGREGATOR_FLUSH_INTERVAL=30
    restart: unless-stopped

  spark-etl:
    build: ./src/spark_s3_etl
    container_name: spark-s3-etl
    environment:
      - AWS_ENDPOINT=${AWS_ENDPOINT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET_DATA=${AWS_S3_BUCKET_DATA}
      - SPARK_MASTER=local[*]
    volumes:
      - ./:/opt/spark/work-dir
      - spark-logs:/opt/spark/logs
    networks:
      - etl-network
    depends_on:
      - minio
    command: >
      bash -c "
        echo 'Waiting for MinIO to be ready...' &&
        sleep 10 &&
        echo 'Starting Spark ETL job...' &&
        ./run_etl.sh
          --output-format csv
      "

  s3-tester:
    networks:
      - etl-network
    build: ./tests/s3_tester
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_healthy

  spark-streaming-tester:
    networks:
      - etl-network
    build: ./tests/spark_streaming_tester
    container_name: spark-streaming-tester
    env_file:
      - .env
    environment:
      - CONSUMER_TIMEOUT=60
      - PRODUCER_TIMEOUT=30
      - MAX_MESSAGES=10
      - TEST_DURATION=30
    depends_on:
      - kafka
      - iot-producer
    restart: "no"

  kafka-consumer-tester:
    networks:
      - etl-network
    build: ./tests/kafka_consumer_tester
    env_file:
      - .env
    depends_on:
      - kafka
      - iot-producer
    environment:
      - KAFKA_TEST_MAX_MESSAGES=10
      - KAFKA_TEST_TIMEOUT=30

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  prometheus-data:
  grafana-data:
  minio-data:
  spark-logs:

networks:
  etl-network:
    driver: bridge
    name: streaming-etl-network