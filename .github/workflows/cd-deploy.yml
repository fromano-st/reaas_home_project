name: CD - Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infra/terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TERRAFORM_VERSION: '1.6.0'
  TF_VAR_environment: 'production'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init

    - name: Terraform Format Check
      run: |
        cd infra/terraform
        terraform fmt -check -recursive

    - name: Terraform Validate
      run: |
        cd infra/terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd infra/terraform
        terraform plan -detailed-exitcode -no-color -out=tfplan
      continue-on-error: true

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: infra/terraform/tfplan

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infra/terraform/tfplan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;

          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }

          const body = plan.length > maxGitHubBodyCharacters ?
            `${'```'}hcl\n${plan.substr(0, maxGitHubBodyCharacters)}\n${'```'}\n\n*Plan truncated*` :
            `${'```'}hcl\n${plan}\n${'```'}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Terraform Plan\n\n${body}`
          });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.plan-exitcode == '2') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan
        path: infra/terraform/

    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd infra/terraform
        terraform apply -auto-approve tfplan

    - name: Output Terraform Results
      run: |
        cd infra/terraform
        terraform output -json > terraform-outputs.json
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        cat terraform-outputs.json >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs
        path: infra/terraform/terraform-outputs.json

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init

    - name: Terraform Destroy
      run: |
        cd infra/terraform
        terraform destroy -auto-approve

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [terraform-plan, terraform-apply]
    if: always()

    steps:
    - name: Deployment Success
      if: needs.terraform-apply.result == 'success'
      run: |
        echo "Infrastructure deployment successful!"
        echo "Terraform plan: ${{ needs.terraform-plan.result }}"
        echo "Terraform apply: ${{ needs.terraform-apply.result }}"

    - name: Deployment Failure
      if: needs.terraform-apply.result == 'failure' || needs.terraform-plan.result == 'failure'
      run: |
        echo "Infrastructure deployment failed!"
        echo "Terraform plan: ${{ needs.terraform-plan.result }}"
        echo "Terraform apply: ${{ needs.terraform-apply.result }}"
        exit 1