name: CI - Feature Branch

on:
  push:
    branches:
      - 'feat/**'
      - 'fix/**'
      - 'feature/**'
      - 'bugfix/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r src/producer/requirements.txt
        pip install -r src/streaming/requirements.txt
        pip install -r tests/requirements.txt

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Install terraform formatting tools
      run: |
        # Terraform fmt is built-in
        # Install tflint
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash


    - name: Python Code Formatting Check
      run: |
        echo "Checking Python code formatting with black..."
        black --check --diff src/ tests/

    - name: Python Linting and Auto-fixes
      run: |
        echo "Linting Python code with ruff..."
        ruff check --fix src/ tests/

    - name: Terraform Formatting Check
      run: |
        echo "Checking Terraform formatting..."
        cd infra/terraform
        terraform fmt -check -recursive

    - name: Terraform Linting
      run: |
        echo "Linting Terraform code..."
        cd infra/terraform
        tflint --init
        tflint

    - name: Terraform Validation
      run: |
        echo "Validating Terraform configuration..."
        cd infra/terraform
        terraform init -backend=false
        terraform validate


  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Producer Image
      run: |
        echo "Building producer Docker image..."
        docker build -t iot-producer:test ./src/producer

    - name: Build Streaming Image
      run: |
        echo "Building streaming Docker image..."
        docker build -t spark-streaming:test ./src/streaming

    - name: Build S3 Tester Image
      run: |
        echo "Building S3 tester Docker image..."
        docker build -t s3-tester:test ./tests/s3_tester

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README exists
      run: |
        if [ ! -f README.md ]; then
          echo "README.md is missing!"
          exit 1
        fi
        echo "README.md exists"

    - name: Check documentation completeness
      run: |
        echo "Checking for essential documentation..."

        # Check for key sections in README
        if ! grep -q "## Setup" README.md; then
          echo "Warning: README.md missing Setup section"
        fi

        if ! grep -q "## Usage" README.md; then
          echo "Warning: README.md missing Usage section"
        fi

        # Check for schema documentation
        if [ ! -f src/producer/schema.py ]; then
          echo "Warning: Schema documentation missing"
        fi

        echo "Documentation check completed"

  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, docker-build, documentation-check]
    if: always()

    steps:
    - name: Check job results
      run: |
        echo "CI Results Summary:"
        echo "Lint and Format: ${{ needs.lint-and-format.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Documentation: ${{ needs.documentation-check.result }}"

        if [[ "${{ needs.lint-and-format.result }}" == "failure" ||
              "${{ needs.docker-build.result }}" == "failure" ]]; then
          echo "Critical checks failed!"
          exit 1
        else
          echo "All critical checks passed!"
        fi