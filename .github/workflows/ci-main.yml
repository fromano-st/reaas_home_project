name: CI - Main Branch

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  TERRAFORM_VERSION: '1.11.0'

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r src/producer/requirements.txt
        pip install -r src/streaming/requirements.txt
        pip install -r tests/requirements.txt

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Install terraform formatting tools
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

    - name: Python Code Formatting Check
      run: |
        black --check --diff src/ tests/ docker/

    - name: Python Linting and Auto-fixes
      run: |
        echo "Linting Python code with ruff..."
        ruff check --fix src/ tests/ docker/

    - name: Terraform Formatting Check
      run: |
        cd infra/terraform
        terraform fmt -check -recursive

    - name: Terraform Linting
      run: |
        echo "Linting Terraform code..."
        cd infra/terraform
        tflint --init
        tflint

    - name: Terraform Validation
      run: |
        cd infra/terraform
        terraform init -backend=false
        terraform validate

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        pip install -r src/producer/requirements.txt
        pip install -r src/streaming/requirements.txt

    - name: Run Unit Tests
      run: |
        cd tests
        python -m pytest \
          -v --tb=short --cov=../src --cov-report=xml --cov-report=html \
          --junitxml=test-results.xml

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          tests/test-results.xml
          tests/htmlcov/
          tests/coverage.xml

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: tests/coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        ports:
          - 9092:9092

      minio:
        image: minio/minio
        env:
          MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
        ports:
          - 9000:9000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        pip install -r src/producer/requirements.txt
        pip install -r src/streaming/requirements.txt

    - name: Wait for services
      run: |
        echo "Waiting for Kafka to be ready..."
        timeout 60 bash -c 'until nc -z localhost 9092; do sleep 1; done'
        echo "Waiting for MinIO to be ready..."
        timeout 60 bash -c 'until nc -z localhost 9000; do sleep 1; done'
        sleep 10

    - name: Create .env file for testing
      run: |
        cat > .env << EOF
        KAFKA_BOOTSTRAP_SERVERS=localhost:9092
        KAFKA_TOPIC=iot-events-test
        PRODUCER_INTERVAL=1.0
        CHECKPOINT_LOCATION=/tmp/spark-checkpoints-test
        OUTPUT_PATH=s3a://test-bucket/processed/
        MINIO_ENDPOINT=http://localhost:9000
        AWS_ENDPOINT=http://localhost:9000
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET_LANDING=test-bucket-landing
        AWS_S3_BUCKET_DATA=test-bucket-data
        HISTORICAL_DAYS=1
        EOF

    - name: Test S3 Connectivity
      run: |
        cd tests/s3_tester
        python test_s3.py

    - name: Test Producer Integration
      run: |
        cd src/producer
        timeout 30 python producer.py || true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Producer image
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: ./docker/producer/Dockerfile
        push: false
        tags: iot-producer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Streaming image
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: ./docker/producer/Dockerfile
        push: false
        tags: spark-streaming:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build S3 Tester image
      uses: docker/build-push-action@v5
      with:
        context: ./tests/s3_tester
        push: false
        tags: s3-tester:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, docker-build]
    if: success()

    steps:
    - name: Success Notification
      run: |
        echo "All CI checks passed successfully!"
        echo "Unit tests passed"
        echo "Integration tests passed"
        echo "Docker images built successfully"
        echo "Ready for deployment"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, docker-build]
    if: failure()

    steps:
    - name: Failure Notification
      run: |
        echo "CI pipeline failed!"
        echo "Please check the failed jobs and fix the issues."
        echo "Lint and Format: ${{ needs.lint-and-format.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        exit 1